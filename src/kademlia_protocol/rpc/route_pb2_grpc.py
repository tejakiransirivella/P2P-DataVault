# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import route_pb2 as route__pb2


class RouterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TestRouter = channel.unary_unary(
                '/Router/TestRouter',
                request_serializer=route__pb2.TestRequest.SerializeToString,
                response_deserializer=route__pb2.TestResponse.FromString,
                )
        self.FindNode = channel.unary_stream(
                '/Router/FindNode',
                request_serializer=route__pb2.FindRequest.SerializeToString,
                response_deserializer=route__pb2.FindNodeResponse.FromString,
                )
        self.FindValue = channel.unary_unary(
                '/Router/FindValue',
                request_serializer=route__pb2.FindRequest.SerializeToString,
                response_deserializer=route__pb2.FindValueResponse.FromString,
                )
        self.Store = channel.unary_unary(
                '/Router/Store',
                request_serializer=route__pb2.StoreRequest.SerializeToString,
                response_deserializer=route__pb2.StoreResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/Router/Ping',
                request_serializer=route__pb2.PingRequest.SerializeToString,
                response_deserializer=route__pb2.PingResponse.FromString,
                )
        self.Lookup = channel.unary_unary(
                '/Router/Lookup',
                request_serializer=route__pb2.LookupRequest.SerializeToString,
                response_deserializer=route__pb2.LookupResponse.FromString,
                )


class RouterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TestRouter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Store(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lookup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TestRouter': grpc.unary_unary_rpc_method_handler(
                    servicer.TestRouter,
                    request_deserializer=route__pb2.TestRequest.FromString,
                    response_serializer=route__pb2.TestResponse.SerializeToString,
            ),
            'FindNode': grpc.unary_stream_rpc_method_handler(
                    servicer.FindNode,
                    request_deserializer=route__pb2.FindRequest.FromString,
                    response_serializer=route__pb2.FindNodeResponse.SerializeToString,
            ),
            'FindValue': grpc.unary_unary_rpc_method_handler(
                    servicer.FindValue,
                    request_deserializer=route__pb2.FindRequest.FromString,
                    response_serializer=route__pb2.FindValueResponse.SerializeToString,
            ),
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=route__pb2.StoreRequest.FromString,
                    response_serializer=route__pb2.StoreResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=route__pb2.PingRequest.FromString,
                    response_serializer=route__pb2.PingResponse.SerializeToString,
            ),
            'Lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.Lookup,
                    request_deserializer=route__pb2.LookupRequest.FromString,
                    response_serializer=route__pb2.LookupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Router', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Router(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TestRouter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/TestRouter',
            route__pb2.TestRequest.SerializeToString,
            route__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Router/FindNode',
            route__pb2.FindRequest.SerializeToString,
            route__pb2.FindNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/FindValue',
            route__pb2.FindRequest.SerializeToString,
            route__pb2.FindValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/Store',
            route__pb2.StoreRequest.SerializeToString,
            route__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/Ping',
            route__pb2.PingRequest.SerializeToString,
            route__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Router/Lookup',
            route__pb2.LookupRequest.SerializeToString,
            route__pb2.LookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
